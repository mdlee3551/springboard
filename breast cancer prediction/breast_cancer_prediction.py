# -*- coding: utf-8 -*-
"""Breast cancer prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rBN6Pql-FVQoguQiCkQebKyyk1MbOiKt
"""

pip install matplotlib

pip install mpld3

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

# %matplotlib inline
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import mpld3 as mpl

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn import metrics
from sklearn import model_selection 
from sklearn.model_selection import cross_val_score

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("data.csv")
df.head()

df.drop('id',axis=1, inplace=True)
df.drop('Unnamed: 32', axis=1, inplace=True)

df['diagnosis'] = df['diagnosis'].map({'M':1,'B':0})
df.head()

df.describe()

plt.hist(df['diagnosis'])
plt.title('Diagnosis (M=1, B=0)')
plt.show

# data visualization
features_mean=list(df.columns[1:11])
dfm = df[df['diagnosis'] == 1]
dfb = df[df['diagnosis'] == 0]

plt.rcParams.update({'font.size': 8})
fig, axes = plt.subplots(nrows=5, ncols=2, figsize=(8,10))
axes = axes.ravel()
for idx, ax in enumerate(axes):
  ax.figure
  binwidth= (max(df[features_mean[idx]]) - min(df[features_mean[idx]]))/50
  ax.hist([dfm[features_mean[idx]],dfb[features_mean[idx]]], bins=np.arange(min(df[features_mean[idx]]), max(df[features_mean[idx]]) + binwidth, binwidth) , alpha=0.5,stacked=True, label=['M','B'],color=['r','g'])
  ax.legend(loc='upper right')
  ax.set_title(features_mean[idx])
plt.tight_layout()
plt.show()

#create a test set and a training set, 70:30 split
traindf,testdf = train_test_split (df, test_size =0.3)

def classification_model (model, data, predictors, outcome):
  model.fit(data[predictors],data[outcome])
  #make predictions on training set
  predictions = model.predict(data[predictors])
  #print accuracy
  accuracy = metrics.accuracy_score(predictions, data[outcome])
  print("Accuracy : %s" % "{0:.3%}".format(accuracy))

  #perform k-fold cross validation with 5 folds
  kf = KFold(n_splits=5)
  error = []
  for train, test in kf.split(traindf):
    #filter training data
    train_predictors = (data[predictors].iloc[train, :])
    #The target to train the algorithm
    train_target = data[outcome].iloc[train]
    #train the algorithm using the predictors and target
    model.fit(train_predictors, train_target)
    #record error from each cross-validation run
    error.append(model.score(data[predictors].iloc[test,:], data[outcome].iloc[test]))
    print("Cross-validation Score : %s" % "{0:.3%}".format(np.mean(error)))

    #Fit the model again so that it can be refered outside the function
    model.fit(data[predictors], data[outcome])

#Logistic Regression model
#cancer diagnosis depends on the mean cell radius, mean perimeter, mean area, mean compactness, mean concavity and mean concave points based on histogram analysis


predictor_var = ['radius_mean','perimeter_mean','area_mean','compactness_mean','concave points_mean']
outcome_var ='diagnosis'
model=LogisticRegression()
classification_model(model,traindf,predictor_var,outcome_var)

predictor_var = ['radius_mean']
model=LogisticRegression()
classification_model(model,traindf,predictor_var,outcome_var)

# decision tree model
predictor_var = ['radius_mean','perimeter_mean','area_mean','compactness_mean','concave points_mean']
model = DecisionTreeClassifier()
classification_model(model,traindf,predictor_var,outcome_var)

predictor_var = ['radius_mean']
model = DecisionTreeClassifier()
classification_model(model,traindf,predictor_var,outcome_var)

# Random forest , Use all the features of the nucleus
predictor_var = features_mean
model = RandomForestClassifier(n_estimators=100,min_samples_split=25, max_depth=7, max_features=2)
classification_model(model, traindf,predictor_var,outcome_var)

#Create a series with feature importances:
featimp = pd.Series(model.feature_importances_, index=predictor_var).sort_values(ascending=False)
print(featimp)

# Using top 5 features
predictor_var = ['concave points_mean','area_mean','radius_mean','perimeter_mean','concavity_mean',]
model = RandomForestClassifier(n_estimators=100, min_samples_split=25, max_depth=7, max_features=2)
classification_model(model,traindf,predictor_var,outcome_var)

predictor_var =  ['radius_mean']
model = RandomForestClassifier(n_estimators=100)
classification_model(model, traindf,predictor_var,outcome_var)

# use on the test dataset
# Use all the features 
predictor_var = features_mean
model = RandomForestClassifier(n_estimators=100,min_samples_split=25, max_depth=7, max_features=2)
classification_model(model, testdf,predictor_var,outcome_var)